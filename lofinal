// 1. Recolectar solicitudes APROBADAS con lote pendiente
ClearCollect(
    colLotesPendientes,
    Filter(sng_Lotes, lote_Estado = "Pendiente")
);

ClearCollect(
    colSolicitudesAprobadasConLote,
    ShowColumns(
        Filter(
            sng_solicitudes,
            sng_loteID in colLotesPendientes.lote_LoteID
        ),
        sng_solicitudAprobador1Email,
        sng_solicitudAprobador1Nombre,
        sng_solicitudAprobador1ID,
        sng_solicitudBeneficiarioEmail,
        sng_solicitudBeneficiarioNombre,
        sng_solicitudBeneficiarioID,
        sng_solicitudPeticionarioEmail,
        sng_solicitudPeticionarioNombre,
        sng_solicitudPeticionarioID,
        sng_solicitudCosteEstimado,
        sng_solicitudCECO,
        sng_solicitudEntidad,
        sng_solicitudProducto,
        sng_solicitudFecha,
        sng_solicitudFechaFin,
        Solicitudes,
        sng_loteID
    )
);

// 2. Resumen solicitudes con lote pendiente por manager
If(
    !IsEmpty(colSolicitudesAprobadasConLote),
    ClearCollect(
        colResumenSolicitudesConLotePendiente,
        AddColumns(
            GroupBy(
                colSolicitudesAprobadasConLote,
                sng_solicitudAprobador1ID,
                "Registros"
            ),
            "ManagerNombre", First(Registros).sng_solicitudAprobador1Nombre,
            "ManagerEmail", First(Registros).sng_solicitudAprobador1Email,
            "CECO", First(Registros).sng_solicitudCECO,
            "Entidad", First(Registros).sng_solicitudEntidad,
            "Producto", First(Registros).sng_solicitudProducto,
            "Total", Sum(Registros, sng_solicitudCosteEstimado),
            "SolicitudID", Concat(Registros, Solicitudes, ","),
            "LoteID", First(Registros).sng_loteID
        )
    )
);

// 3. Recolectar solicitudes APROBADAS sin lote
ClearCollect(
    colSolicitudesAprobadasSinLote,
    ShowColumns(
        Filter(
            sng_solicitudes,
            sng_solicitudEstado = AppEstados.AprobadoAprobador1 &&
            IsBlank(sng_loteID)
        ),
        sng_solicitudAprobador1Email,
        sng_solicitudAprobador1Nombre,
        sng_solicitudAprobador1ID,
        sng_solicitudBeneficiarioEmail,
        sng_solicitudBeneficiarioNombre,
        sng_solicitudBeneficiarioID,
        sng_solicitudPeticionarioEmail,
        sng_solicitudPeticionarioNombre,
        sng_solicitudPeticionarioID,
        sng_solicitudCosteEstimado,
        sng_solicitudCECO,
        sng_solicitudEntidad,
        sng_solicitudProducto,
        sng_solicitudFecha,
        sng_solicitudFechaFin,
        Solicitudes
    )
);

// 4. Validar si hay solicitudes sin lote
If(
    CountRows(colSolicitudesAprobadasSinLote) = 0,
    Notify("No hay solicitudes aprobadas sin lote. No se generó ningún lote.", NotificationType.Warning),
    
    // Hay solicitudes sin lote → agrupar por Manager y crear lote por grupo
    With(
        {
            colAgrupadasPorManager: AddColumns(
                GroupBy(
                    colSolicitudesAprobadasSinLote,
                    sng_solicitudAprobador1ID,
                    "Registros"
                ),
                "ManagerNombre", First(Registros).sng_solicitudAprobador1Nombre,
                "ManagerEmail", First(Registros).sng_solicitudAprobador1Email
            )
        },
        ForAll(
            colAgrupadasPorManager,
            With(
                {
                    varLoteIDPorManager: Text(Now(), "yyymmdd-hhmm") & "@" & ThisRecord.sng_solicitudAprobador1ID
                },
                
                // Crear nuevo lote
                Patch(
                    sng_Lotes,
                    Defaults(sng_Lotes),
                    {
                        lote_LoteID: varLoteIDPorManager,
                        lote_Estado: "Pendiente",
                        lote_CreadoFecha: Now(),
                        lote_CreadoPorEmail: currentUser.userPrincipalName,
                        lote_CreadoPorNombre: currentUser.displayName
                    }
                );

                // Marcar solicitudes de ese manager con el lote generado
                ForAll(
                    ThisRecord.Registros,
                    Patch(
                        sng_solicitudes,
                        {Solicitudes: ThisRecord.Solicitudes},
                        {sng_loteID: varLoteIDPorManager}
                    )
                )
            )
        )
    )
);

// 5. Recolectar nuevamente todas las solicitudes con lote pendiente
ClearCollect(
    colLotesPendientes,
    Filter(sng_Lotes, lote_Estado = "Pendiente")
);

ClearCollect(
    colSolicitudesConLotesPendientes,
    ShowColumns(
        Filter(
            sng_solicitudes,
            sng_loteID in colLotesPendientes.lote_LoteID
        ),
        sng_solicitudAprobador1Email,
        sng_solicitudAprobador1Nombre,
        sng_solicitudAprobador1ID,
        sng_solicitudBeneficiarioEmail,
        sng_solicitudBeneficiarioNombre,
        sng_solicitudBeneficiarioID,
        sng_solicitudPeticionarioEmail,
        sng_solicitudPeticionarioNombre,
        sng_solicitudPeticionarioID,
        sng_solicitudCosteEstimado,
        sng_solicitudCECO,
        sng_solicitudEntidad,
        sng_solicitudProducto,
        sng_solicitudFecha,
        sng_solicitudFechaFin,
        Solicitudes,
        sng_loteID
    )
);

// 6. Resumen de solicitudes con lotes pendientes por Manager
If(
    !IsEmpty(colSolicitudesConLotesPendientes),
    ClearCollect(
        colResumenSolicitudesConLotesPendientes,
        AddColumns(
            GroupBy(
                colSolicitudesConLotesPendientes,
                sng_solicitudAprobador1ID,
                "Registros"
            ),
            "ManagerNombre", First(Registros).sng_solicitudAprobador1Nombre,
            "ManagerEmail", First(Registros).sng_solicitudAprobador1Email,
            "CECO", First(Registros).sng_solicitudCECO,
            "Entidad", First(Registros).sng_solicitudEntidad,
            "Producto", First(Registros).sng_solicitudProducto,
            "Total", Sum(Registros, sng_solicitudCosteEstimado),
            "Usuarios_en_peticion", Concat(Registros, sng_solicitudBeneficiarioNombre, ","),
            "FechasFin", Concat(Registros, Text(sng_solicitudFechaFin, "dd/mm/yy"), ","),
            "FechasIni", Concat(Registros, Text(sng_solicitudFecha, "dd/mm/yy"), ","),
            "SolicitudID", Concat(Registros, Solicitudes, ","),
            "LoteID", First(Registros).sng_loteID
        )
    )
);
