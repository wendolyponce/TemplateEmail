// ==============================================
// BOTÓN: Generar Lote
// ==============================================

// 1. Buscar lote pendiente
Set(
    varLotePendiente,
    LookUp(sng_Lotes, lote_Estado = "Pendiente")
);

// 2. Recolectar solicitudes aprobadas sin lote
ClearCollect(
    colSolicitudesAprobadasSinLote,
    ShowColumns(
        Filter(
            sng_solicitudes,
            sng_solicitudEstado = AppEstados.AprobadoAprobador1 && IsBlank(sng_loteID)
        ),
        sng_solicitudAprobador1Email,
        sng_solicitudAprobador1Nombre,
        sng_solicitudCosteEstimado,
        sng_solicitudBeneficiarioEmail,
        cr8bd_manager,
        Solicitudes
    )
);

// 3. Evaluar si hay solicitudes aprobadas sin lote
If(
    CountRows(colSolicitudesAprobadasSinLote) = 0,
    
    // 3.1 No hay solicitudes → notificar
    Notify("No hay solicitudes aprobadas sin lote. No se generó ningún lote.", NotificationType.Warning),

    // 3.2 Hay solicitudes aprobadas
    If(
        !IsBlank(varLotePendiente),

        // 3.2.1 Existe lote pendiente → mostrar popup
        Set(varPopUpAlertaLote, true),

        // 3.2.2 No existe lote pendiente → generar nuevo lote directamente
        // ================================
        // BLOQUE REUTILIZABLE: Generar nuevo lote y resumen
        // ================================
        
        Set(
            varLoteIDGenerado,
            Left(currentUser.userPrincipalName, Find("@", currentUser.userPrincipalName)) & Text(Now(), "yyymmdd-hhmm")
        );

        ForAll(
            colSolicitudesAprobadasSinLote,
            Patch(
                sng_solicitudes,
                { Solicitudes: ThisRecord.Solicitudes },
                { sng_loteID: varLoteIDGenerado }
            )
        );

        ClearCollect(
            colSolicitudesConNuevoLote,
            Filter(sng_solicitudes, sng_loteID = varLoteIDGenerado)
        );

        ClearCollect(
            colResumenPorAprobador,
            AddColumns(
                GroupBy(
                    colSolicitudesConNuevoLote,
                    cr8bd_manager,
                    Registros
                ),
                NombreManager, First(Registros).sng_solicitudAprobador1Nombre,
                TotalCosteEstimado, Sum(Registros, sng_solicitudCosteEstimado),
                Beneficiarios, Concat(Registros, sng_solicitudBeneficiarioEmail, ";"),
                FechaLote, Now(),
                ID, varLoteIDGenerado
            )
        );

        ForAll(
            colResumenPorAprobador,
            Patch(
                sng_Lotes,
                Defaults(sng_Lotes),
                {
                    lote_LoteID: ID,
                    lote_Estado: "Pendiente",
                    lote_CantidadSolicitudes: CountRows(Registros),
                    lote_CreadoFecha: FechaLote,
                    lote_CreadoPorEmail: currentUser.userPrincipalName,
                    lote_CreadoPorNombre: currentUser.displayName,
                    lote_TotalCosteEstimado: TotalCosteEstimado
                }
            )
        )
    )
);







// ==============================================
// BOTÓN: Sí, Sobrescribir
// ==============================================

// 1. Recolectar solicitudes asociadas al lote pendiente actual
ClearCollect(
    colSolicitudesAntiguas,
    Filter(
        sng_solicitudes,
        sng_loteID = varLotePendiente.lote_LoteID
    )
);

// 2. Validar si hay solicitudes nuevas o antiguas que sobrescribir
If(
    CountRows(colSolicitudesAprobadasSinLote) = 0 && CountRows(colSolicitudesAntiguas) = 0,
    
    // 2.1 No hay solicitudes que mover → notificar
    Notify("No hay solicitudes nuevas ni existentes que reasignar. No se generó ningún lote.", NotificationType.Warning),

    // 2.2 Hay al menos una solicitud para procesar
    With(
        { newLoteID: Left(currentUser.userPrincipalName, Find("@", currentUser.userPrincipalName)) & Text(Now(), "yyymmdd-hhmm") },

        // 3. Cambiar estado del lote anterior
        Patch(
            sng_Lotes, 
            LookUp(sng_Lotes, lote_LoteID = varLotePendiente.lote_LoteID),
            { lote_Estado: "Reemplazado" }
        );

        // 4. Asignar nuevo lote ID
        Set(varLoteIDGenerado, newLoteID);

        // 5. Reasignar solicitudes antiguas
        ForAll(
            colSolicitudesAntiguas,
            Patch(
                sng_solicitudes,
                { Solicitudes: ThisRecord.Solicitudes },
                { sng_loteID: varLoteIDGenerado }
            )
        );

        // 6. Asignar lote a solicitudes nuevas
        ForAll(
            colSolicitudesAprobadasSinLote,
            Patch(
                sng_solicitudes,
                { Solicitudes: ThisRecord.Solicitudes },
                { sng_loteID: varLoteIDGenerado }
            )
        );

        // ================================
        // BLOQUE REUTILIZABLE: Generar nuevo lote y resumen
        // ================================
        
        ClearCollect(
            colSolicitudesConNuevoLote,
            Filter(sng_solicitudes, sng_loteID = varLoteIDGenerado)
        );

        ClearCollect(
            colResumenPorAprobador,
            AddColumns(
                GroupBy(
                    colSolicitudesConNuevoLote,
                    cr8bd_manager,
                    Registros
                ),
                NombreManager, First(Registros).sng_solicitudAprobador1Nombre,
                TotalCosteEstimado, Sum(Registros, sng_solicitudCosteEstimado),
                Beneficiarios, Concat(Registros, sng_solicitudBeneficiarioEmail, ";"),
                FechaLote, Now(),
                ID, varLoteIDGenerado
            )
        );

        ForAll(
            colResumenPorAprobador,
            Patch(
                sng_Lotes,
                Defaults(sng_Lotes),
                {
                    lote_LoteID: ID,
                    lote_Estado: "Pendiente",
                    lote_CantidadSolicitudes: CountRows(Registros),
                    lote_CreadoFecha: FechaLote,
                    lote_CreadoPorEmail: currentUser.userPrincipalName,
                    lote_CreadoPorNombre: currentUser.displayName,
                    lote_TotalCosteEstimado: TotalCosteEstimado
                }
            )
        )
    );

    // 7. Cerrar popup
    Set(varPopUpAlertaLote, false)
);






