// ================================
// BOTÓN: Generar Lote
// ================================

// Buscar si existe lote pendiente
Set(
    varLotePendiente,
    LookUp(sng_Lotes, lote_Estado = "Pendiente")
);

// Obtener solicitudes aprobadas sin lote
ClearCollect(
    colSolicitudesAprobadasSinLote,
    ShowColumns(
        Filter(
            sng_solicitudes,
            sng_solicitudEstado = AppEstados.AprobadoAprobador1 && IsBlank(sng_loteID)
        ),
        sng_solicitudAprobador1Email,
        sng_solicitudAprobador1Nombre,
        sng_solicitudCosteEstimado,
        sng_solicitudBeneficiarioEmail,
        cr8bd_manager,
        Solicitudes
    )
);

// Validar si hay solicitudes aprobadas sin lote
If(
    CountRows(colSolicitudesAprobadasSinLote) = 0,
    Notify("No hay solicitudes aprobadas sin lote. No se generó ningún lote.", NotificationType.Warning),
    
    If(
        !IsBlank(varLotePendiente),
        // Mostrar alerta si hay lote pendiente
        Set(varPopUpAlertaLote, true),
        
        // Generar lote directamente si no hay lote pendiente
        /* INICIO BLOQUE REUTILIZABLE */
        // ================================
        // BLOQUE: Generar nuevo lote y resumen
        // ================================
        Set(
            varLoteIDGenerado,
            Left(currentUser.userPrincipalName, Find("@", currentUser.userPrincipalName)) & Text(Now(), "yyymmdd-hhmm")
        );

        ForAll(
            colSolicitudesAprobadasSinLote,
            Patch(
                sng_solicitudes,
                { Solicitudes: ThisRecord.Solicitudes },
                { sng_loteID: varLoteIDGenerado }
            )
        );

        ClearCollect(
            colSolicitudesConNuevoLote,
            Filter(
                sng_solicitudes,
                sng_loteID = varLoteIDGenerado
            )
        );

        ClearCollect(
            colResumenPorAprobador,
            AddColumns(
                GroupBy(
                    colSolicitudesConNuevoLote,
                    cr8bd_manager,
                    Registros
                ),
                NombreManager, First(Registros).sng_solicitudAprobador1Nombre,
                TotalCosteEstimado, Sum(Registros, sng_solicitudCosteEstimado),
                Beneficiarios, Concat(Registros, sng_solicitudBeneficiarioEmail, ";"),
                FechaLote, Now(),
                ID, varLoteIDGenerado
            )
        );

        ForAll(
            colResumenPorAprobador,
            Patch(
                sng_Lotes,
                Defaults(sng_Lotes),
                {
                    lote_LoteID: ID,
                    lote_Estado: "Pendiente",
                    lote_CantidadSolicitudes: CountRows(Registros),
                    lote_CreadoFecha: FechaLote,
                    lote_CreadoPorEmail: currentUser.userPrincipalName,
                    lote_CreadoPorNombre: currentUser.displayName,
                    lote_TotalCosteEstimado: TotalCosteEstimado
                }
            )
        )
        /* FIN BLOQUE REUTILIZABLE */
    )
);



// ================================
// BLOQUE: Generar nuevo lote y resumen
// ================================

// 1. Generar nuevo ID de lote
Set(
    varLoteIDGenerado,
    Left(currentUser.userPrincipalName, Find("@", currentUser.userPrincipalName)) & Text(Now(), "yyymmdd-hhmm")
);

// 2. Asignar lote a solicitudes aprobadas sin lote
ForAll(
    colSolicitudesAprobadasSinLote,
    Patch(
        sng_solicitudes,
        { Solicitudes: ThisRecord.Solicitudes },
        { sng_loteID: varLoteIDGenerado }
    )
);

// 3. Recolectar todas las solicitudes asociadas al nuevo lote
ClearCollect(
    colSolicitudesConNuevoLote,
    Filter(
        sng_solicitudes,
        sng_loteID = varLoteIDGenerado
    )
);

// 4. Agrupar por aprobador y generar resumen
ClearCollect(
    colResumenPorAprobador,
    AddColumns(
        GroupBy(
            colSolicitudesConNuevoLote,
            cr8bd_manager,
            Registros
        ),
        NombreManager, First(Registros).sng_solicitudAprobador1Nombre,
        TotalCosteEstimado, Sum(Registros, sng_solicitudCosteEstimado),
        Beneficiarios, Concat(Registros, sng_solicitudBeneficiarioEmail, ";"),
        FechaLote, Now(),
        ID, varLoteIDGenerado
    )
);

// 5. Crear nuevo lote en Dataverse
ForAll(
    colResumenPorAprobador,
    Patch(
        sng_Lotes,
        Defaults(sng_Lotes),
        {
            lote_LoteID: ID,
            lote_Estado: "Pendiente",
            lote_CantidadSolicitudes: CountRows(Registros),
            lote_CreadoFecha: FechaLote,
            lote_CreadoPorEmail: currentUser.userPrincipalName,
            lote_CreadoPorNombre: currentUser.displayName,
            lote_TotalCosteEstimado: TotalCosteEstimado
        }
    )
);


// ================================
// BOTÓN: Sí, Sobrescribir
// ================================

// Cambiar estado del lote actual a "Reemplazado"
Patch(
    sng_Lotes, 
    LookUp(sng_Lotes, lote_LoteID = varLotePendiente.lote_LoteID),
    {
        lote_Estado: "Reemplazado"
    }
);

// Ejecutar lógica de generación del nuevo lote
/* INICIO BLOQUE REUTILIZABLE */
// ================================
// BLOQUE: Generar nuevo lote y resumen
// ================================
Set(
    varLoteIDGenerado,
    Left(currentUser.userPrincipalName, Find("@", currentUser.userPrincipalName)) & Text(Now(), "yyymmdd-hhmm")
);

ForAll(
    colSolicitudesAprobadasSinLote,
    Patch(
        sng_solicitudes,
        { Solicitudes: ThisRecord.Solicitudes },
        { sng_loteID: varLoteIDGenerado }
    )
);

ClearCollect(
    colSolicitudesConNuevoLote,
    Filter(
        sng_solicitudes,
        sng_loteID = varLoteIDGenerado
    )
);

ClearCollect(
    colResumenPorAprobador,
    AddColumns(
        GroupBy(
            colSolicitudesConNuevoLote,
            cr8bd_manager,
            Registros
        ),
        NombreManager, First(Registros).sng_solicitudAprobador1Nombre,
        TotalCosteEstimado, Sum(Registros, sng_solicitudCosteEstimado),
        Beneficiarios, Concat(Registros, sng_solicitudBeneficiarioEmail, ";"),
        FechaLote, Now(),
        ID, varLoteIDGenerado
    )
);

ForAll(
    colResumenPorAprobador,
    Patch(
        sng_Lotes,
        Defaults(sng_Lotes),
        {
            lote_LoteID: ID,
            lote_Estado: "Pendiente",
            lote_CantidadSolicitudes: CountRows(Registros),
            lote_CreadoFecha: FechaLote,
            lote_CreadoPorEmail: currentUser.userPrincipalName,
            lote_CreadoPorNombre: currentUser.displayName,
            lote_TotalCosteEstimado: TotalCosteEstimado
        }
    )
)
/* FIN BLOQUE REUTILIZABLE */

// Cerrar popup
Set(varPopUpAlertaLote, false);
