1. BOTON GENERAR LOTE:

//Buscar si existe un lote pendiente

//1. Buscar el Ãºnico lote pendediente (si existe)
Set(
    varLotePendiente,
    LookUp(sng_Lotes, lote_Estado = "Pendiente")
);

//2. Si existe, asignar ID
If(
    !IsBlank(varLotePendiente), 
        Set(varLoteIDGenerado, varLotePendiente.lote_LoteID), 
        Set(varLoteIDGenerado, Blank())
);

//Verificar si hay un lote pendiente
If(
    !IsBlank(varLotePendiente),

        //Si no esta vacio mostrar popup
        Set(varPopUpAlertaLote, true);
        ,

        //GENERAR si esta vacio, mismo codigo que sobreescribir
        Set(varLoteIDGenerado,Left(currentUser.userPrincipalName,Find("@",currentUser.userPrincipalName)) & Text(Now(),"yyymmdd-hhmm"));

        //Crear una copia de solicitud solo con estados pendientes ACTUALES
        ClearCollect(
            colSolicitud,
            ShowColumns(
                Filter(
                        sng_solicitudes,
                        sng_solicitudEstado = AppEstados.AprobadoAprobador1
                    ),
                    sng_solicitudAprobador1Email,
                    sng_solicitudAprobador1Nombre,
                    sng_solicitudImporte,
                    sng_solicitudBeneficiarioEmail,
                    Solicitudes
                )
        );


        //Marcar las solicitudes
        ForAll(
            colSolicitud, 
            Patch(
                sng_solicitudes,
                {
                    Solicitudes: ThisRecord.cr8bd_solicitudesid
                }, 
                {
                    sng_loteID: varLoteIDGenerado
                }
            )
        );

        //Generar un lote desde cero
        ClearCollect(
            colResumenManager,
            AddColumns(
                GroupBy(
                    colSolicitud,
                    cr8bd_manager,
                    Registros
                ),
                NombreManager, First(Registros).cr8bd_sng_solicitudaprobador1nombre,
                Total, Sum(Registros,cr8bd_importe),
                Usuarios_en_peticion, Concat(Registros,cr8bd_sol_beneficiario,";"),
                FechaAgrupacion, Now(),
                ID,
                varLoteIDGenerado
            )
        );
        // Guardar datos en Dataverse, cuando no hay lotes pendientes
        ForAll(
            colResumenManager, 
            Patch(
                sng_Lotes,
                Defaults(sng_Lotes),
                {
                    lote_LoteID:ID, 
                    lote_Estado: "Pendiente", 
                    lote_CantidadSolicitudes: CountRows(Registros), 
                    lote_CreadoFecha: FechaAgrupacion,
                    lote_CreadoPorEmail: currentUser.userPrincipalName, 
                    lote_ImporteTotal: Total
                }
            )
        );
);




//ACTUALIZAR, mismo que boton
//Cantidad de solicitudes SIN LOTE, con estado AprobadorAprobador1
Set(varCantidadSinLote, 
    CountRows(
        Filter(
            sng_solicitudes, 
            sng_solicitudEstado = AppEstados.AprobadoAprobador1 && IsBlank(sng_loteID)
        )
    )
);

//Cantidad de solicitudes CON LOTE, con estado AprobadorAprobador1
Set(varCantidadConLote, 
    CountRows(
        Filter(
            sng_solicitudes, 
            sng_solicitudEstado = AppEstados.AprobadoAprobador1 && !IsBlank(sng_loteID)
        )
    )
);


2. Cuando abre el popup dan dos opciones:

2.1 SI SOBREESCRIBIR

        //GENERAR si esta vacio, mismo codigo que sobreescribir
        Set(varLoteIDGenerado,Left(currentUser.userPrincipalName,Find("@",currentUser.userPrincipalName)) & Text(Now(),"yyymmdd-hhmm"));

        
        
        //Cambiar el estado del lote a sobreescribir
        Patch(
            sng_Lotes, 
            LookUp(sng_Lotes, lote_LoteID = varLotePendiente.lote_LoteID),
            {
                lote_Estado: "Reemplazado"
            }
        );

        //Crear una copia de solicitud solo con estados pendientes ACTUALES
        ClearCollect(
            colSolicitud,
            ShowColumns(
                Filter(
                        sng_solicitudes,
                        sng_solicitudEstado = AppEstados.AprobadoAprobador1
                    ),
                    sng_solicitudAprobador1Email,
                    sng_solicitudAprobador1Nombre,
                    sng_solicitudImporte,
                    sng_solicitudBeneficiarioEmail,
                    Solicitudes
                )
        );


        //Marcar las solicitudes
        ForAll(
            colSolicitud, 
            Patch(
                sng_solicitudes,
                {
                    Solicitudes: ThisRecord.cr8bd_solicitudesid
                }, 
                {
                    sng_loteID: varLoteIDGenerado
                }
            )
        );

        //Generar un lote desde cero
        ClearCollect(
            colResumenManager,
            AddColumns(
                GroupBy(
                    colSolicitud,
                    'cr8bd_manager',
                    'Registros'
                ),
                'NombreManager', First(Registros).'cr8bd_sng_solicitudaprobador1nombre',
                'Total', Sum(Registros,'cr8bd_importe'),
                'Usuarios_en_peticion', Concat(Registros,'cr8bd_sol_beneficiario',";"),
                'FechaAgrupacion', Now(),
                'ID',
                varLoteIDGenerado
            )
        );
        // Guardar datos en Dataverse, cuando no hay lotes pendientes
        ForAll(
            colResumenManager, 
            Patch(
                sng_Lotes,
                Defaults(sng_Lotes),
                {
                    lote_LoteID:ID, 
                    lote_Estado: "Pendiente", 
                    lote_CantidadSolicitudes: CountRows(Registros), 
                    lote_CreadoFecha: FechaAgrupacion,
                    lote_CreadoPorEmail: currentUser.userPrincipalName, 
                    lote_ImporteTotal: Total
                }
            )
        );

//ACTUALIZAR, mismo que boton
//Cantidad de solicitudes SIN LOTE, con estado AprobadorAprobador1
Set(varCantidadSinLote, 
    CountRows(
        Filter(
            sng_solicitudes, 
            sng_solicitudEstado = AppEstados.AprobadoAprobador1 && IsBlank(sng_loteID)
        )
    )
);

//Cantidad de solicitudes CON LOTE, con estado AprobadorAprobador1
Set(varCantidadConLote, 
    CountRows(
        Filter(
            sng_solicitudes, 
            sng_solicitudEstado = AppEstados.AprobadoAprobador1 && !IsBlank(sng_loteID)
        )
    )
);

Set(varPopUpAlertaLote, false);

2.2 NO CANCELAR

Set(varPopUpAlertaLote, false);
