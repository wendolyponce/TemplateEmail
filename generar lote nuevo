// ==========================
// BLOQUE 1.1: Buscar lote pendiente existente
// ==========================
Set(
    varLotePendiente,
    LookUp(sng_Lotes, lote_Estado = "Pendiente")
);

// ==========================
// BLOQUE 1.2: Guardar ID si existe, o limpiar
// ==========================
If(
    !IsBlank(varLotePendiente),
    Set(varLoteIDGenerado, varLotePendiente.lote_LoteID),
    Set(varLoteIDGenerado, Blank())
);

// ==========================
// BLOQUE 1.3: Si ya hay un lote pendiente, mostrar popup de confirmación
// ==========================
If(
    !IsBlank(varLotePendiente),
    Set(varPopUpAlertaLote, true), // Mostramos el popup de confirmar sobreescritura

    // ==========================
    // BLOQUE 1.4: No hay lote pendiente → Crear nuevo lote
    // ==========================

    // 1. Generar nuevo ID de lote (basado en email y fecha)
    Set(varLoteIDGenerado,Left(currentUser.userPrincipalName, Find("@", currentUser.userPrincipalName)) & Text(Now(), "yyymmdd-hhmm" &"w"));

    // 2. Filtrar solicitudes aprobadas y sin lote
    ClearCollect(
        colSolicitudesAprobadas,
        ShowColumns(
            Filter(
                sng_solicitudes,
                sng_solicitudEstado = AppEstados.AprobadoAprobador1 && IsBlank(sng_loteID)
            ),
            sng_solicitudAprobador1Email,
            sng_solicitudAprobador1Nombre,
            sng_solicitudCosteEstimado,
            sng_solicitudBeneficiarioEmail,
            Solicitudes // ID de solicitud
        )
    );

    // 3. Validar que haya solicitudes que procesar
    If(
        CountRows(colSolicitudesAprobadas) = 0,
        Notify("No hay solicitudes aprobadas sin lote. No se generó ningún lote.", NotificationType.Warning),
        
        // 4. Marcar solicitudes con el nuevo lote ID
        ForAll(
            colSolicitudesAprobadas,
            Patch(
                sng_solicitudes,
                { Solicitudes: ThisRecord.cr8bd_solicitudesid},
                { sng_loteID: varLoteIDGenerado }
            )
        );

        // 5. Agrupar por aprobador y generar resumen
        ClearCollect(
            colResumenPorAprobador,
            AddColumns(
                GroupBy(
                    colSolicitudesAprobadas,
                    cr8bd_manager,
                    Registros
                ),
                NombreManager, First(Registros).cr8bd_sng_solicitudaprobador1nombre,
                TotalCosteEstimado, Sum(Registros, cr8bd_sng_solicitudcosteestimado),
                Beneficiarios, Concat(Registros, cr8bd_sol_beneficiario, ";"),
                FechaLote, Now(),
                ID, varLoteIDGenerado
            )
        );

        // 6. Crear el nuevo lote en Dataverse
        ForAll(
            colResumenPorAprobador,
            Patch(
                sng_Lotes,
                Defaults(sng_Lotes),
                {
                    lote_LoteID: ID,
                    lote_Estado: "Pendiente",
                    lote_CantidadSolicitudes: CountRows(Registros),
                    lote_CreadoFecha: FechaLote,
                    lote_CreadoPorEmail: currentUser.userPrincipalName,
                    lote_CreadoPorNombre: currentUser.displayName,
                    lote_TotalCosteEstimado: TotalCosteEstimado
                }
            )
        )

        





        

    )
);
