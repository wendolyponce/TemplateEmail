// ==========================
// BLOQUE 1.1: Buscar lote pendiente existente
// ==========================
Set(
    varLotePendiente,
    LookUp(sng_Lotes, lote_Estado = "Pendiente")
);

// ==========================
// BLOQUE 1.2: Recolectar solicitudes aprobadas sin lote
// ==========================
ClearCollect(
    colSolicitudesAprobadas,
    ShowColumns(
        Filter(
            sng_solicitudes,
            sng_solicitudEstado = AppEstados.AprobadoAprobador1 && IsBlank(sng_loteID)
        ),
        sng_solicitudAprobador1Email,
        sng_solicitudAprobador1Nombre,
        sng_solicitudCosteEstimado,
        sng_solicitudBeneficiarioEmail,
        Solicitudes // ID de solicitud
    )
);

// ==========================
// BLOQUE 1.3: Validar si hay solicitudes aprobadas sin lote
// ==========================
If(
    CountRows(colSolicitudesAprobadas) = 0,
    
    // ðŸŸ¡ No hay solicitudes â†’ Notificar y no hacer nada mÃ¡s
    Notify("No hay solicitudes aprobadas sin lote. No se generÃ³ ningÃºn lote.", NotificationType.Warning),
    
    // ðŸŸ¢ SÃ­ hay solicitudes â†’ Continuar
    If(
        !IsBlank(varLotePendiente),
        
        // Hay un lote pendiente â†’ mostrar popup para confirmar sobreescritura
        Set(varPopUpAlertaLote, true),

        // No hay lote pendiente â†’ generar lote directamente
        // ==========================
        // BLOQUE 1.4: Generar nuevo lote
        // ==========================

        Set(
            varLoteIDGenerado,
            Left(currentUser.userPrincipalName, Find("@", currentUser.userPrincipalName)) & Text(Now(), "yyymmdd-hhmm" & "w")
        );

        // 1. Marcar solicitudes con nuevo lote
        ForAll(
            colSolicitudesAprobadas,
            Patch(
                sng_solicitudes,
                { Solicitudes: ThisRecord.cr8bd_solicitudesid },
                { sng_loteID: varLoteIDGenerado }
            )
        );

        // 2. Agrupar por manager
        ClearCollect(
            colResumenPorAprobador,
            AddColumns(
                GroupBy(
                    colSolicitudesAprobadas,
                    cr8bd_manager,
                    "Registros"
                ),
                NombreManager, First(Registros).cr8bd_sng_solicitudaprobador1nombre,
                TotalCosteEstimado, Sum(Registros, cr8bd_sng_solicitudcosteestimado),
                Beneficiarios, Concat(Registros, cr8bd_sol_beneficiario, ";"),
                FechaLote, Now(),
                ID, varLoteIDGenerado
            )
        );

        // 3. Crear el nuevo lote
        ForAll(
            colResumenPorAprobador,
            Patch(
                sng_Lotes,
                Defaults(sng_Lotes),
                {
                    lote_LoteID: ID,
                    lote_Estado: "Pendiente",
                    lote_CantidadSolicitudes: CountRows(Registros),
                    lote_CreadoFecha: FechaLote,
                    lote_CreadoPorEmail: currentUser.userPrincipalName,
                    lote_CreadoPorNombre: currentUser.displayName,
                    lote_TotalCosteEstimado: TotalCosteEstimado
                }
            )
        )
    )
);
