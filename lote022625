// ==============================================
// BOTÓN: Generar Lote
// ==============================================

// 1. Buscar si existe un lote pendiente
Set(
    varLotePendiente,
    LookUp(sng_Lotes, lote_Estado = "Pendiente")
);

// 2. Recolectar solicitudes aprobadas sin lote
ClearCollect(
    colSolicitudesAprobadasSinLote,
    ShowColumns(
        Filter(
            sng_solicitudes,
            sng_solicitudEstado = AppEstados.AprobadoAprobador1 && IsBlank(sng_loteID)
        ),
        sng_solicitudAprobador1Email,
        sng_solicitudAprobador1Nombre,
        sng_solicitudCosteEstimado,
        sng_solicitudBeneficiarioEmail,
        cr8bd_manager,
        Solicitudes
    )
);

// 3. Validar si hay solicitudes
If(
    CountRows(colSolicitudesAprobadasSinLote) = 0,
    
    // 3.1 No hay solicitudes aprobadas sin lote
    Notify("No hay solicitudes aprobadas sin lote. No se generó ningún lote.", NotificationType.Warning),

    // 3.2 Hay solicitudes disponibles
    If(
        !IsBlank(varLotePendiente),

        // 3.2.1 Existe un lote pendiente → mostrar confirmación
        Set(varPopUpAlertaLote, true),

        // 3.2.2 No existe lote pendiente → generar lote directamente
        // ================================
        // BLOQUE REUTILIZABLE: Generar nuevo lote y resumen
        // ================================

        // Generar nuevo ID de lote
        Set(
            varLoteIDGenerado,
            Left(currentUser.userPrincipalName, Find("@", currentUser.userPrincipalName)) & Text(Now(), "yyymmdd-hhmm")
        );

        // Asignar lote a solicitudes nuevas
        ForAll(
            colSolicitudesAprobadasSinLote,
            Patch(
                sng_solicitudes,
                { Solicitudes: ThisRecord.Solicitudes },
                { sng_loteID: varLoteIDGenerado }
            )
        );

        // Recolectar solicitudes del nuevo lote
        ClearCollect(
            colSolicitudesConNuevoLote,
            Filter(
                sng_solicitudes,
                sng_loteID = varLoteIDGenerado
            )
        );

        // Agrupar por aprobador y generar resumen
        ClearCollect(
            colResumenPorAprobador,
            AddColumns(
                GroupBy(
                    colSolicitudesConNuevoLote,
                    cr8bd_manager,
                    Registros
                ),
                NombreManager, First(Registros).sng_solicitudAprobador1Nombre,
                TotalCosteEstimado, Sum(Registros, sng_solicitudCosteEstimado),
                Beneficiarios, Concat(Registros, sng_solicitudBeneficiarioEmail, ";"),
                FechaLote, Now(),
                ID, varLoteIDGenerado
            )
        );

        // Crear el nuevo lote
        ForAll(
            colResumenPorAprobador,
            Patch(
                sng_Lotes,
                Defaults(sng_Lotes),
                {
                    lote_LoteID: ID,
                    lote_Estado: "Pendiente",
                    lote_CantidadSolicitudes: CountRows(Registros),
                    lote_CreadoFecha: FechaLote,
                    lote_CreadoPorEmail: currentUser.userPrincipalName,
                    lote_CreadoPorNombre: currentUser.displayName,
                    lote_TotalCosteEstimado: TotalCosteEstimado
                }
            )
        )
    )
);












// ==============================================
// BOTÓN: Sí, Sobrescribir
// ==============================================

// 1. Cambiar el estado del lote pendiente a "Reemplazado"
Patch(
    sng_Lotes, 
    LookUp(sng_Lotes, lote_LoteID = varLotePendiente.lote_LoteID),
    {
        lote_Estado: "Reemplazado"
    }
);

// 2. Recolectar solicitudes que tenían el lote pendiente anterior
ClearCollect(
    colSolicitudesAntiguas,
    Filter(
        sng_solicitudes,
        sng_loteID = varLotePendiente.lote_LoteID
    )
);

// 3. Generar nuevo ID de lote
Set(
    varLoteIDGenerado,
    Left(currentUser.userPrincipalName, Find("@", currentUser.userPrincipalName)) & Text(Now(), "yyymmdd-hhmm")
);

// 4. Reasignar lote a solicitudes antiguas
ForAll(
    colSolicitudesAntiguas,
    Patch(
        sng_solicitudes,
        { Solicitudes: ThisRecord.Solicitudes },
        { sng_loteID: varLoteIDGenerado }
    )
);

// 5. Asignar lote a nuevas solicitudes
ForAll(
    colSolicitudesAprobadasSinLote,
    Patch(
        sng_solicitudes,
        { Solicitudes: ThisRecord.Solicitudes },
        { sng_loteID: varLoteIDGenerado }
    )
);

// ================================
// BLOQUE REUTILIZABLE: Generar nuevo lote y resumen
// ================================

// Recolectar solicitudes del nuevo lote
ClearCollect(
    colSolicitudesConNuevoLote,
    Filter(
        sng_solicitudes,
        sng_loteID = varLoteIDGenerado
    )
);

// Agrupar por aprobador y generar resumen
ClearCollect(
    colResumenPorAprobador,
    AddColumns(
        GroupBy(
            colSolicitudesConNuevoLote,
            cr8bd_manager,
            Registros
        ),
        NombreManager, First(Registros).sng_solicitudAprobador1Nombre,
        TotalCosteEstimado, Sum(Registros, sng_solicitudCosteEstimado),
        Beneficiarios, Concat(Registros, sng_solicitudBeneficiarioEmail, ";"),
        FechaLote, Now(),
        ID, varLoteIDGenerado
    )
);

// Crear el nuevo lote
ForAll(
    colResumenPorAprobador,
    Patch(
        sng_Lotes,
        Defaults(sng_Lotes),
        {
            lote_LoteID: ID,
            lote_Estado: "Pendiente",
            lote_CantidadSolicitudes: CountRows(Registros),
            lote_CreadoFecha: FechaLote,
            lote_CreadoPorEmail: currentUser.userPrincipalName,
            lote_CreadoPorNombre: currentUser.displayName,
            lote_TotalCosteEstimado: TotalCosteEstimado
        }
    )
);

// 6. Cerrar popup
Set(varPopUpAlertaLote, false);














