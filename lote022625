Onstart:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


// ========== Versión y usuario ==========
Set(varVersion, "V1.0.7");
Set(varPopUpAlertaLote, false);
Set(currentUser, Office365Users.MyProfileV2());

// Rol del usuario
Set(
    varRolUsuario,
    LookUp(
        sng_usuarios,
        sng_usuarioEmail1 = currentUser.userPrincipalName ||
        sng_usuarioEmail2 = currentUser.userPrincipalName,
        sng_usuarioRol
    )
);
Set(varRolController, varRolUsuario = "Controller");

// Limpiar colecciones
Clear(colSolicitudesLotePendiente);
Clear(ResumenSolicitudesLotePendiente);
Clear(colSolicitudesAprobadasSinLote);

// ==========================
// Recolectar solicitudes aprobadas sin lote
// ==========================
ClearCollect(
    colSolicitudesAprobadasSinLote,
    ShowColumns(
        Filter(
            sng_solicitudes,
            sng_solicitudEstado = AppEstados.AprobadoAprobador1 && IsBlank(sng_loteID)
        ),
        sng_solicitudAprobador1Email,
        sng_solicitudAprobador1Nombre,
        sng_solicitudCosteEstimado,
        sng_solicitudBeneficiarioEmail,
        Solicitudes // ID de solicitud
    )
);

If(
    CountRows(colSolicitudesAprobadasSinLote) = 0,
        ClearCollect(
            colResumenSolicitudesAprobadasSinLote,
            AddColumns(
                GroupBy(
                    colSolicitudesAprobadasSinLote,
                    cr8bd_manager,
                    Registros
                ),
                NombreManager, First(Registros).cr8bd_sng_solicitudaprobador1nombre,
                TotalCosteEstimado, Sum(Registros, cr8bd_sng_solicitudcosteestimado),
                Beneficiarios, Concat(Registros, cr8bd_sol_beneficiario, ";"),
                FechaLote, Now(),
                ID, varLoteIDGenerado
            )
        );

);

// ==========================
// Recolectar solicitudes aprobadas con lote Pendiente
// ==========================

// 1. Cargar el único lote pendiente existente
Set(varLotePendiente,LookUp(sng_Lotes, lote_Estado = "Pendiente"));

// 2. Si existe, asignar su ID a varLoteIDGenerado
If(
    !IsBlank(varLotePendiente),
    Set(varLoteIDGenerado, varLotePendiente.lote_LoteID),
    Set(varLoteIDGenerado, Blank())
);

// 3. Si hay un lote pendiente, cargar sus solicitudes
If(
    !IsBlank(varLoteIDGenerado),
    ClearCollect(
        colSolicitudesLotePendiente,
        ShowColumns(
            Filter(sng_solicitudes, sng_loteID = varLoteIDGenerado),
            sng_solicitudAprobador1Email,
            sng_solicitudAprobador1Nombre,
            sng_solicitudBeneficiarioEmail,
            sng_solicitudBeneficiarioNombre,
            sng_solicitudCosteEstimado,
            Solicitudes
        )
    ),
    Clear(colSolicitudesLotePendiente)
);

// 4. Generar resumen por manager si hay solicitudes
If(
    !IsEmpty(colSolicitudesLotePendiente),
    ClearCollect(
        ResumenSolicitudesLotePendiente,
        AddColumns(
            GroupBy(
                colSolicitudesLotePendiente,
                cr8bd_manager,
                Registros
            ),
            NombreManager, First(Registros).cr8bd_sng_solicitudaprobador1nombre,
            Total, Sum(Registros, cr8bd_sng_solicitudcosteestimado),
            Usuarios_en_peticion, Concat(Registros, cr8bd_sol_beneficiario, ";"),
            FechaAgrupacion, Now(),
            ID, varLoteIDGenerado
        )
    )
);

// 5. Métricas: Cantidad de solicitudes con/sin lote
Set(
    varCantidadSinLote,
    CountRows(
        Filter(
            sng_solicitudes,
            sng_solicitudEstado = AppEstados.AprobadoAprobador1 &&
            IsBlank(sng_loteID)
        )
    )
);
Set(
    varCantidadConLote,
    CountRows(
        Filter(
            sng_solicitudes,
            sng_solicitudEstado = AppEstados.AprobadoAprobador1 &&
            !IsBlank(sng_loteID)
        )
    )
);


//========== Aprobaciones pendientes para usuario actual ==========
Set(
    varAprobacionesPendientes,
    CountRows(
        Filter(
            sng_solicitudes,
            sng_solicitudAprobador1Email = currentUser.userPrincipalName &&
            sng_solicitudEstado = AppEstados.PendienteAprobador1
        )
    )
);




GENERAR LOTE::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::




// Buscar lote pendiente existente
Set(varLotePendiente,LookUp(sng_Lotes, lote_Estado = "Pendiente"));

// ==========================
// Paso 1. Recolectar solicitudes aprobadas sin lote
// ==========================
ClearCollect(
    colSolicitudesAprobadasSinLote,
    ShowColumns(
        Filter(
            sng_solicitudes,
            sng_solicitudEstado = AppEstados.AprobadoAprobador1 && IsBlank(sng_loteID)
        ),
        sng_solicitudAprobador1Email,
        sng_solicitudAprobador1Nombre,
        sng_solicitudCosteEstimado,
        sng_solicitudBeneficiarioEmail,
        Solicitudes // ID de solicitud
    )
);

// ==========================
// Paso 2. Validar si hay solicitudes aprobadas sin lote
// ==========================
If(
    CountRows(colSolicitudesAprobadasSinLote) = 0,

    //No hay solicitudes -> Notificar y no hacer nada más
    Notify("No hay solicitudes aprobadas sin lote. No se generó ningún lote.", NotificationType.Warning),

    //Si hay solicitudes -> Continuar
    If(
        !IsBlank(varLotePendiente),

        // Hay un lote pendiente -> mostrar popup
        Set(varPopUpAlertaLote, true),

        // No hay un lote pendiente -> generar un lote nuevo MISMO QUE SOBREESCRIBIR
        Set(varLoteIDGenerado,Left(currentUser.userPrincipalName, Find("@", currentUser.userPrincipalName)) & Text(Now(), "yyymmdd-hhmm"));

        // 1. Marcar solicitudes anteriores con el nuevo lote ID
        ForAll(
            colSolicitudesAprobadasSinLote,
            Patch(
                sng_solicitudes,
                { Solicitudes: ThisRecord.cr8bd_solicitudesid},
                { sng_loteID: varLoteIDGenerado }
            )
        );

        // 2. Agrupar por aprobador y generar resumen
        ClearCollect(
            colResumenSolicitudesAprobadasSinLote,
            AddColumns(
                GroupBy(
                    colSolicitudesAprobadasSinLote,
                    cr8bd_manager,
                    Registros
                ),
                NombreManager, First(Registros).cr8bd_sng_solicitudaprobador1nombre,
                TotalCosteEstimado, Sum(Registros, cr8bd_sng_solicitudcosteestimado),
                Beneficiarios, Concat(Registros, cr8bd_sol_beneficiario, ";"),
                FechaLote, Now(),
                ID, varLoteIDGenerado
            )
        ); 

        // 3. Crear el nuevo lote en Dataverse
        ForAll(
            colResumenSolicitudesAprobadasSinLote,
            Patch(
                sng_Lotes,
                Defaults(sng_Lotes),
                {
                    lote_LoteID: ID,
                    lote_Estado: "Pendiente",
                    lote_CantidadSolicitudes: CountRows(Registros),
                    lote_CreadoFecha: FechaLote,
                    lote_CreadoPorEmail: currentUser.userPrincipalName,
                    lote_CreadoPorNombre: currentUser.displayName,
                    lote_TotalCosteEstimado: TotalCosteEstimado
                }
            )
        )
    );
);











Boton de si sobreescribir:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


/* INICIO BLOQUE REUTILIZABLE */

        // No hay un lote pendiente -> generar un lote nuevo 
        Set(varLoteIDGenerado,Left(currentUser.userPrincipalName, Find("@", currentUser.userPrincipalName)) & Text(Now(), "yyymmdd-hhmm"));

        /* PAUSE  BLOQUE REUTILIZABLE */
//Cambiar el al lote nuevo las solicitudes del pendiente
Patch(
    sng_solicitudes, 
    LookUp(sng_solicitudes, sng_loteID = varLotePendiente.lote_LoteID),
    {
        sng_loteID: varLoteIDGenerado
    }
); 

//Cambiar el estado del lote a sobreescribir
Patch(
    sng_Lotes, 
    LookUp(sng_Lotes, lote_LoteID = varLotePendiente.lote_LoteID),
    {
        lote_Estado: "Reemplazado"
    }
); 

        /* INICIO NUEVAMENTE BLOQUE REUTILIZABLE */

        // 1. Marcar solicitudes con el nuevo lote ID
        ForAll(
            colSolicitudesAprobadasSinLote,
            Patch(
                sng_solicitudes,
                { Solicitudes: ThisRecord.cr8bd_solicitudesid},
                { sng_loteID: varLoteIDGenerado }
            )
        );

        // 2. Agrupar por aprobador y generar resumen
        ClearCollect(
            colResumenPorAprobador,
            AddColumns(
                GroupBy(
                    colSolicitudesAprobadasSinLote,
                    cr8bd_manager,
                    Registros
                ),
                NombreManager, First(Registros).cr8bd_sng_solicitudaprobador1nombre,
                TotalCosteEstimado, Sum(Registros, cr8bd_sng_solicitudcosteestimado),
                Beneficiarios, Concat(Registros, cr8bd_sol_beneficiario, ";"),
                FechaLote, Now(),
                ID, varLoteIDGenerado
            )
        );

        // 3. Crear el nuevo lote en Dataverse
        ForAll(
            colResumenPorAprobador,
            Patch(
                sng_Lotes,
                Defaults(sng_Lotes),
                {
                    lote_LoteID: ID,
                    lote_Estado: "Pendiente",
                    lote_CantidadSolicitudes: CountRows(Registros),
                    lote_CreadoFecha: FechaLote,
                    lote_CreadoPorEmail: currentUser.userPrincipalName,
                    lote_CreadoPorNombre: currentUser.displayName,
                    lote_TotalCosteEstimado: TotalCosteEstimado
                }
            )
        );

        /* FIN BLOQUE REUTILIZABLE */

//Cerrar popup
Set(varPopUpAlertaLote, false);
