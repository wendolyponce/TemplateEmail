// ========== Versión y usuario ==========
Set(varVersion, "V1.0.8");
Set(varPopUpAlertaLote, false);
Set(varPopUpSubir, false);
Set(varPopUpEditar, false);
Set(currentUser, Office365Users.MyProfileV2());

// Rol del usuario
Set(
    varRolUsuario,
    LookUp(
        sng_usuarios,
        sng_usuarioEmail1 = currentUser.userPrincipalName ||
        sng_usuarioEmail2 = currentUser.userPrincipalName,
        sng_usuarioRol
    )
);
Set(varRolController, varRolUsuario = "Controller");

// Limpiar colecciones
Clear(colSolicitudesConLoteUltimo);
Clear(colResumenSolicitudesConLoteUltimo);
Clear(colSolicitudesAprobadasSinLote);
Clear(colResumenSolicitudesAprobadasSinLote);


// 3. Recolectar solicitudes APROBADAS sin lote
ClearCollect(
    colSolicitudesAprobadasSinLote,
    ShowColumns(
        Filter(
            sng_solicitudes,
            sng_solicitudEstado = AppEstados.AprobadoAprobador1 && IsBlank(sng_loteID)
        ),
            sng_solicitudAprobador1Email,
            sng_solicitudAprobador1Nombre,
            sng_solicitudAprobador1ID,
            sng_solicitudBeneficiarioEmail,
            sng_solicitudBeneficiarioNombre,
            sng_solicitudBeneficiarioID,
            sng_solicitudPeticionarioEmail,
            sng_solicitudPeticionarioNombre,
            sng_solicitudPeticionarioID,
            sng_solicitudCosteEstimado,
            sng_solicitudCECO, 
            sng_solicitudEntidad,
            sng_solicitudProducto,
            sng_solicitudFecha, 
            sng_solicitudFechaFin,
            Solicitudes
    )
);

//Resumir solicitudes aprobadas SIN lote por Manager
If(
    CountRows(colSolicitudesAprobadasSinLote) > 0,
        ClearCollect(
            colResumenSolicitudesAprobadasSinLote,
            AddColumns(
                GroupBy(
                    colSolicitudesAprobadasSinLote,
                    cr8bd_manager,
                    Registros
                ),
                CECO, First(Registros).cr8bd_sol_solicitudceco,
                Entidad, First(Registros).cr8bd_sol_solicitudentidad,
                ManagerNombre, First(Registros).cr8bd_sng_solicitudaprobador1nombre,
                ManagerID, First(Registros).cr8bd_sng_aprobador1id,
                BeneficiariosNombre, Concat(Registros, cr8bd_sol_beneficiario, ","),
                BeneficiariosID, Concat(Registros, cr8bd_sng_solicitudbeneficiarioid, ","),
                BeneficiariosEmail, Concat(Registros, cr8bd_sng_solicitudbeneficiarionombre, ","),
                PeticionariosNombre, Concat(Registros, cr8bd_sng_solicitudpeticionarionombre, ","),
                PeticionariosID, Concat(Registros, cr8bd_sng_solicitudpeticionarioid, ","),
                PeticionariosEmail, Concat(Registros, cr8bd_sng_solicitudpeticionarionombre, ","),
                Producto, First(Registros).cr8bd_producto,
                Total, Round(Sum(Registros, cr8bd_sng_solicitudcosteestimado),2),
                Usuarios_en_peticion, Concat(Registros, cr8bd_sol_beneficiario, ","),
                FechaAgrupacion, Now(),
                FechasFin, Concat(Registros, Text(cr8bd_sng_solicitudfechafin, "dd/mm/yy"), ","),
                FechasIni, Concat(Registros, Text(cr8bd_sng_solicitudfecha, "dd/mm/yy"), ","),
                SolicitudID, Concat(Registros, cr8bd_solicitudesid, ","),   
                ID, varLoteIDGenerado & "@" & First(Registros).cr8bd_sng_aprobador1id
            )
        );

);


//:::::::::::::::::

// 1. Recolectar solicitudes APROBADAS con lote pendiente
ClearCollect(
    colLotesPendientes,
    Filter(sng_Lotes, lote_Estado = "Pendiente")
);



ClearCollect(
    colSolicitudesConLoteUltimo,
    ShowColumns(
        Filter(
            sng_solicitudes,
            sng_loteID in colLotesPendientes.lote_LoteID
        ),
        sng_solicitudAprobador1Email,
        sng_solicitudAprobador1Nombre,
        sng_solicitudAprobador1ID,
        sng_solicitudBeneficiarioEmail,
        sng_solicitudBeneficiarioNombre,
        sng_solicitudBeneficiarioID,
        sng_solicitudPeticionarioEmail,
        sng_solicitudPeticionarioNombre,
        sng_solicitudPeticionarioID,
        sng_solicitudCosteEstimado,
        sng_solicitudCECO,
        sng_solicitudEntidad,
        sng_solicitudProducto,
        sng_solicitudFecha,
        sng_solicitudFechaFin,
        Solicitudes,
        sng_loteID
    )
);
// 2. Resumen solicitudes con lote pendiente por manager
If(
    !IsEmpty(colSolicitudesConLoteUltimo),
    ClearCollect(
        colResumenSolicitudesConLoteUltimo,
        AddColumns(
            GroupBy(
                colSolicitudesConLoteUltimo,
                cr8bd_manager,
                Registros
            ),
            CECO, First(Registros).cr8bd_sol_solicitudceco,
            Entidad, First(Registros).cr8bd_sol_solicitudentidad,
            ManagerNombre, First(Registros).cr8bd_sng_solicitudaprobador1nombre,
            ManagerID, First(Registros).cr8bd_sng_aprobador1id,
            BeneficiariosNombre, Concat(Registros, cr8bd_sol_beneficiario, ","),
            BeneficiariosID, Concat(Registros, cr8bd_sng_solicitudbeneficiarioid, ","),
            BeneficiariosEmail, Concat(Registros, cr8bd_sng_solicitudbeneficiarionombre, ","),
            PeticionariosNombre, Concat(Registros, cr8bd_sng_solicitudpeticionarionombre, ","),
            PeticionariosID, Concat(Registros, cr8bd_sng_solicitudpeticionarioid, ","),
            PeticionariosEmail, Concat(Registros, cr8bd_sng_solicitudpeticionarionombre, ","),
            Producto, First(Registros).cr8bd_producto,
            Total, Round(Sum(Registros, cr8bd_sng_solicitudcosteestimado),2),
            Usuarios_en_peticion, Concat(Registros, cr8bd_sol_beneficiario, ","),
            FechaAgrupacion, Now(),
            FechasFin, Concat(Registros, Text(cr8bd_sng_solicitudfechafin, "dd/mm/yy"), ","),
            FechasIni, Concat(Registros, Text(cr8bd_sng_solicitudfecha, "dd/mm/yy"), ","),
            SolicitudID, Concat(Registros, cr8bd_solicitudesid, ","),
            ID, varLoteIDGenerado & "@" & First(Registros).cr8bd_sng_aprobador1id
        )
    )
);


//Calcular fecha final 30 nov. 

Set(varMesActual, Month(Today()));
Set(varAnioActual, Year(Today()));

If(
    varMesActual = 12,
    Set(varMesesEstimados, 11), // Diciembre → hasta noviembre del próximo año
    Set(varMesesEstimados, 11 - varMesActual + 1) // Incluye el mes actual
);

Set(varFechaFin, 
    If(
    varMesActual = 12,
    Date(varAnioActual + 1, 11, 30),
    Date(varAnioActual, 11, 30) 
    )
);

// Coste mensual fijo
Set(varCosteMes, 38.7);

// Coste total desde hoy hasta 30 nov:
Set(
  varCosteEstimado,
  Round(
    If(
      Day(Today()) > 15,
      // Si hoy es día 16–31: el mes actual vale medio mes y el resto meses completos
      varCosteMes * (varMesesEstimados - 0.5),
      // Si hoy es día 1–15: todos los meses (incluyendo el actual) van completos
      varCosteMes * varMesesEstimados
    ),
    2  // redondear a 2 decimales
  )
);
